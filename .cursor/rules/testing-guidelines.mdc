---
description: Testing Guidelines for Riverpod Projects
globs:
alwaysApply: false
---

# Testing Guidelines (Riverpod)

## Test Structure

Follow the same directory structure as the main code:

test/
├── features/
│ └── feature_name/
│ ├── application/
│ │ └── usecases/
│ │ └── feature_usecase_test.dart
│ ├── presentation/
│ │ └── providers/
│ │ └── feature_provider_test.dart
│ └── ui/
│ └── pages/
│ └── feature_screen_test.dart
└── widget_test.dart

yaml
Copy
Edit

---

## Testing Dependencies

- **flutter_test** — For widget and unit testing
- **mocktail** — For mocking dependencies
- **riverpod_test** — For testing providers and listeners
- **build_runner + mocktail_generator** — For codegen mocks (optional)

---

## Provider Testing Pattern

```dart
void main() {
  test('FeatureNotifier emits expected states', () async {
    final container = ProviderContainer(
      overrides: [
        featureUseCaseProvider.overrideWith((ref) => MockFeatureUseCase()),
      ],
    );

    final notifier = container.read(featureNotifierProvider.notifier);
    final listener = Listener();

    container.listen<FeatureState>(
      featureNotifierProvider,
      listener,
      fireImmediately: true,
    );

    when(() => container.read(featureUseCaseProvider)())
        .thenAnswer((_) async => Right(successData));

    await notifier.loadFeature();

    verifyInOrder([
      () => listener(null, FeatureInitial()),
      () => listener(FeatureInitial(), FeatureLoading()),
      () => listener(FeatureLoading(), FeatureSuccess(data: successData)),
    ]);
  });
}
Use Case Testing
dart
Copy
Edit
void main() {
  late MockFeatureRepository mockRepository;
  late FeatureUseCase useCase;

  setUp(() {
    mockRepository = MockFeatureRepository();
    useCase = FeatureUseCase(repository: mockRepository);
  });

  group('FeatureUseCase', () {
    test('should return data when repository call is successful', () async {
      when(() => mockRepository.getData())
          .thenAnswer((_) async => Right(testData));

      final result = await useCase();

      expect(result, equals(Right(testData)));
      verify(() => mockRepository.getData()).called(1);
    });

    test('should return failure when repository call fails', () async {
      when(() => mockRepository.getData())
          .thenAnswer((_) async => Left(ServerFailure()));

      final result = await useCase();

      expect(result, equals(Left(ServerFailure())));
      verify(() => mockRepository.getData()).called(1);
    });
  });
}
Widget Testing (With ProviderScope)
dart
Copy
Edit
void main() {
  testWidgets('FeatureScreen shows loading indicator', (tester) async {
    await tester.pumpWidget(
      ProviderScope(
        overrides: [
          featureNotifierProvider.overrideWith(() => FakeLoadingNotifier()),
        ],
        child: const MaterialApp(
          home: FeatureScreen(),
        ),
      ),
    );

    expect(find.byType(CircularProgressIndicator), findsOneWidget);
  });

  testWidgets('FeatureScreen shows loaded data', (tester) async {
    await tester.pumpWidget(
      ProviderScope(
        overrides: [
          featureNotifierProvider.overrideWith(() => FakeSuccessNotifier()),
        ],
        child: const MaterialApp(
          home: FeatureScreen(),
        ),
      ),
    );

    expect(find.text('Test Data'), findsOneWidget);
  });
}

class FakeLoadingNotifier extends FeatureNotifier {
  FakeLoadingNotifier() : super() {
    state = FeatureLoading();
  }
}

class FakeSuccessNotifier extends FeatureNotifier {
  FakeSuccessNotifier() : super() {
    state = FeatureSuccess(data: testData);
  }
}
Mock Generation (Optional)
If using mocktail generator:

bash
Copy
Edit
flutter pub run build_runner build

```

## Test Coverage
- Aim for at least 80% code coverage
- Test all use cases and repositories
- Test all BLoC events and states
- Test critical UI components
description:
globs:
alwaysApply: false
---
