---
description: Navigation Patterns with GoRouter and Riverpod
globs:
alwaysApply: false
---

## Overview

This project uses **GoRouter** integrated with **Riverpod** for navigation. This enables clean separation of concerns, reactive routing, and deep linking.

## Router Configuration

[lib/core/routes/app_router.dart](mdc:lib/core/routes/app_router.dart) contains:
- Route constants in `AppRoutes` class
- A `Provider<GoRouter>` for global router configuration
- Navigation guards and error handling

---

## Route Constants

```dart
class AppRoutes {
  static const String home = '/home';
  static const String productDetails = '/product-details/:id';
  static const String signIn = '/sign-in';
}
Router Provider Setup
dart
Copy
Edit
final goRouterProvider = Provider<GoRouter>((ref) {
  final authState = ref.watch(authStateProvider);

  return GoRouter(
    initialLocation: AppRoutes.home,
    refreshListenable: GoRouterRefreshStream(ref.watch(authStateChangesProvider)),
    routes: [
      GoRoute(
        path: AppRoutes.home,
        builder: (context, state) => const HomeScreen(),
      ),
      GoRoute(
        path: AppRoutes.productDetails,
        builder: (context, state) => ProductDetailsScreen(
          productId: state.pathParameters['id']!,
        ),
      ),
      GoRoute(
        path: AppRoutes.signIn,
        builder: (context, state) => const SignInScreen(),
      ),
    ],
    redirect: (context, state) {
      final isLoggedIn = authState.isAuthenticated;

      final isGoingToSignIn = state.matchedLocation == AppRoutes.signIn;

      if (!isLoggedIn && !isGoingToSignIn) {
        return AppRoutes.signIn;
      }

      if (isLoggedIn && isGoingToSignIn) {
        return AppRoutes.home;
      }

      return null;
    },
    errorBuilder: (context, state) => const ErrorScreen(),
  );
});
Navigation Methods (Riverpod Style)
Basic Navigation
dart
Copy
Edit
context.go(AppRoutes.home);
Named Routes
dart
Copy
Edit
context.goNamed('home');
Parameters
dart
Copy
Edit
context.go('/product-details/123');
Query Parameters
dart
Copy
Edit
context.go('/product-details?id=123&category=electronics');

final id = GoRouterState.of(context).queryParameters['id'];
Navigation from Notifier (Riverpod StateNotifier)
dart
Copy
Edit
class AuthNotifier extends StateNotifier<AuthState> {
  final Ref ref;
  AuthNotifier(this.ref) : super(AuthInitial());

  Future<void> login(BuildContext context) async {
    // auth logic
    state = AuthSuccess();

    context.go(AppRoutes.home);
  }
}
Deep Linking Support
dart
Copy
Edit
GoRoute(
  path: '/product/:id',
  builder: (context, state) {
    final id = state.pathParameters['id']!;
    return ProductDetailsScreen(productId: id);
  },
);
Route Guards (Riverpod-Driven)
Handled via redirect and refreshListenable in goRouterProvider.

dart
Copy
Edit
redirect: (context, state) {
  final isAuthenticated = ref.read(authStateProvider).isAuthenticated;
  final isOnLogin = state.matchedLocation == AppRoutes.signIn;

  if (!isAuthenticated && !isOnLogin) return AppRoutes.signIn;
  if (isAuthenticated && isOnLogin) return AppRoutes.home;

  return null;
}
Error Handling
dart
Copy
Edit
errorBuilder: (context, state) => const ErrorScreen(),
Best Practices
Use Provider for router config (goRouterProvider)

Use GoRouterRefreshStream or ref.listen() for auth/session changes

Avoid navigation from Notifiers without passing BuildContext

Always use constants for paths (AppRoutes)

Handle deep links and path/query parameters cleanly

Return null in redirect when no change is needed

Example Navigation Patterns
Authentication Flow
dart
Copy
Edit
// After successful login
context.go(AppRoutes.home);

// After logout
context.go(AppRoutes.signIn);
Product Details
dart
Copy
Edit
// Navigate with path parameter
context.go('/product-details/123');

// Read param in screen
final id = GoRouterState.of(context).pathParameters['id'];
Tabs and Query Params
dart
Copy
Edit
// Go to profile tab
context.go('/home?tab=profile');

// Read tab param
final tab = GoRouterState.of(context).queryParameters['tab'];